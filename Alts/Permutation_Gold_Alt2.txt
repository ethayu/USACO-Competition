import java.util.*;

public class Permutation_Gold {

    static long[] factorials = new long[41];
    static int[][] points;
    static int MOD = 1000000007;
    static HashMap<String, HashSet<Integer>> pointsInside = new HashMap<>();


    static int cross(int[] a, int[] b) {
        return a[0] * b[1] - a[1] - b[0];
    }

    static boolean withinRange(double a, double b, double c) {
        return c >= a && c <= b;
    }

    /*static int isInside (int[] a, int[] b, int[] c, int[] p) {

        double denominator = cross(a, b) + cross(b, c) + cross(c, a);
        double wA = (cross(b, c) + cross(p, new int[] {b[0] - c[0], b[1] - c[1]})) / denominator;
        double wB = (cross(c, a) + cross(p, new int[] {c[0] - a[0], c[1] - a[1]})) / denominator;
        double wC = (cross(a, b) + cross(p, new int[] {a[0] - b[0], a[1] - b[1]})) / denominator;
        System.out.println(wA);
        System.out.println(wB);
        System.out.println(wC);
        if (withinRange(0, 1, wA) && withinRange(0, 1, wB) && withinRange(0, 1, wC)) return 0;
        return 1;

    }*/
    static int sign(int[] a, int[] b, int[] c) {
        return (a[0] - c[0]) * (b[1] - c[1]) - (b[0] - c[0]) * (a[1] - c[1]);
    }

    static int dist(int[] a, int[] b) {
        return (a[0] - b[0]) * (a[0] - b[0]) + (a[1] - b[1]) * (a[1] - b[1]);
    }

    static int[] reflect(int[] a, int[] b) {
        return new int[]{b[0] + b[0] - a[0], b[1] + b[1] - a[1]};
    }

    static int canCreate(int[] a, int[] b, int[] c, int[] p) {
        if (isInside(a, b, c, reflect(p, a))) return 1;
        else if (isInside(a, b, c, reflect(p, b))) return 2;
        else if (isInside(a, b, c, reflect(p, c))) return 3;
        else return -2;
    }

    static boolean isInside(int[] a, int[] b, int[] c, int[] p) {
        int d1, d2, d3;
        d1 = sign(p, a, b);
        d2 = sign(p, b, c);
        d3 = sign(p, c, a);
        if(!(((d1 < 0) || (d2 < 0) || (d3 < 0)) && ((d1 > 0) || (d2 > 0) || (d3 > 0)))) {
            if (d1 == 0) {
                if ((p[0] - a[0] > 0 && b[0] - p[0] > 0) || (p[0] - a[0] < 0 && b[0] - p[0] < 0) || (p[0] - a[0] == 0 && b[0] - p[0] == 0)) return false;
            } else if (d2 == 0) {
                if ((p[0] - b[0] > 0 && b[0] - p[0] > 0) || (p[0] - b[0] < 0 && b[0] - p[0] < 0) || (p[0] - b[0] == 0 && b[0] - p[0] == 0)) return false;
            } else if (d3 == 0) {
                if ((p[0] - c[0] > 0 && a[0] - p[0] > 0) || (p[0] - c[0] < 0 && a[0] - p[0] < 0) || (p[0] - c[0] == 0 && a[0] - p[0] == 0)) return false;
            }
            return true;
        }
        return false;
    }

    static int solve(int a, int b, int c) {
        int ret = 0;
        if (!pointsInside.containsKey(a + " " + b + " " + c)) return 6;
        for (int i : pointsInside.get(a + " " + b + " " + c)) {
            if (i == a || i == b || i == c) continue;
            if (i < a) {
                ret += solve(i, a, b) % MOD;
                ret += solve(i, b, c) % MOD;
                ret += solve(i, a, c) % MOD;
            } else if (i < b) {
                ret += solve(a, i, b) % MOD;
                ret += solve(i, b, c) % MOD;
                ret += solve(a, i, c) % MOD;
            } else if (i < c) {
                ret += solve(a, b, i) % MOD;
                ret += solve(b, i, c) % MOD;
                ret += solve(a, i, c) % MOD;
            } else {
                ret += solve(a, b, i) % MOD;
                ret += solve(b, c, i) % MOD;
                ret += solve(a, c, i) % MOD;
            }
        }
        return ret;
    }

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        points = new int[n][2];
        factorials[0] = 1;
        int minY = Integer.MAX_VALUE, maxY = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            points[i][0] = sc.nextInt();
            points[i][1] = sc.nextInt();

            factorials[i + 1] = ((i + 1) * factorials[i]) % MOD;
        }

        int[][][] dp = new int[n][n][n]; //number of ways to create triangle with points i, j, k
        int[][][][] status = new int[n][n][n][n];

        Arrays.sort(points, (o1, o2) -> (o1[0] - o2[0] != 0) ? o1[0] - o2[0] : o1[1] - o2[1]);
        for (int i = 0; i < n - 2; i++) {
            for (int j = i + 1; j < n - 1; j++) {
                for (int k = j + 1; k < n; k++) {
                    for (int l = 0; l < n; l++) {
                        if (l == i || l == j || l == k) continue;
                        if (status[i][j][k][l] == 0) {
                            if (isInside(points[i], points[j], points[k], points[l])) {
                                pointsInside.computeIfAbsent(i + " " + j + " " + k, k1 -> new HashSet<>());
                                pointsInside.get(i + " " + j + " " + k).add(l);
                                status[i][j][k][l] = -1;
                                status[i][j][l][k] = 3;
                                status[i][l][k][j] = 2;
                                status[l][j][k][i] = 1;
                            } else {
                                status[i][j][k][l] = canCreate(points[i], points[j], points[k], points[l]);
                                int[] key;
                                if (status[i][j][k][l] == 3) {
                                    key = new int[]{i, j, l};
                                    Arrays.sort(key);
                                    pointsInside.computeIfAbsent(key[0] + " " + key[1] + " " + key[2], k1 -> new HashSet<>());
                                    pointsInside.get(key[0] + " " + key[1] + " " + key[2]).add(k);
                                    status[i][j][l][k] = -1;
                                } else if (status[i][j][k][l] == 2) {
                                    key = new int[]{i, l, k};
                                    Arrays.sort(key);
                                    pointsInside.computeIfAbsent(key[0] + " " + key[1] + " " + key[2], k1 -> new HashSet<>());
                                    pointsInside.get(key[0] + " " + key[1] + " " + key[2]).add(j);
                                    status[i][l][k][j] = -1;
                                } else if (status[i][j][k][l] == 1) {
                                    key = new int[]{l, j, k};
                                    Arrays.sort(key);
                                    pointsInside.computeIfAbsent(key[0] + " " + key[1] + " " + key[2], k1 -> new HashSet<>());
                                    pointsInside.get(key[0] + " " + key[1] + " " + key[2]).add(i);
                                    status[l][j][k][i] = -1;
                                }
                            }
                        }
                    }
                }
            }
        }
        /*while (true) {
            int a = sc.nextInt();
            System.out.println(isInside(new int[]{-1, 0}, new int[]{2, 0}, new int[]{0, 1}, new int[]{0, a}));
            System.out.println();
        }*/

        String s = "-";
        boolean bad = true;
        for (String str : pointsInside.keySet()) {
            if (pointsInside.get(str).size() == n - 3) {
                if (!s.equals("-")) {
                    bad = true;
                    break;
                }
                s = str;
                bad = false;
            }
        }

        Scanner scanner = new Scanner(s);
        if (!bad) System.out.println(solve(scanner.nextInt(), scanner.nextInt(), scanner.nextInt()));
        else System.out.println(0);

    }

}
